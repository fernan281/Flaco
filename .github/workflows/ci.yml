name: CI Build
on:
  pull_request:
    branches: [master]
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  build-system-deps:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        minimal: ['On', 'Off']
        buildtype: ['Debug']
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: 'true'
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Update base image
        run: sudo apt update -y

      - name: Install build dependencies
        run: sudo DEBIAN_FRONTEND=noninteractive apt install libssl-dev libyaml-dev libc-ares-dev libprotobuf-dev protobuf-compiler libjq-dev libyaml-cpp-dev libgrpc++-dev protobuf-compiler-grpc rpm libelf-dev cmake build-essential libcurl4-openssl-dev linux-headers-$(uname -r) clang llvm git -y

      - name: Prepare project
        run: |
          mkdir build
          pushd build
          cmake \
            -DUSE_BUNDLED_DEPS=Off \
            -DBUILD_FALCO_UNIT_TESTS=On \
            -DCMAKE_BUILD_TYPE=${{ matrix.buildtype }} \
            -DBUILD_BPF=${{ matrix.minimal }} \
            -DMINIMAL_BUILD=${{ matrix.minimal }} \
            ..
          popd

      - name: Build
        run: |
          pushd build
          KERNELDIR=/lib/modules/$(uname -r)/build make -j4 all
          popd

      - name: Run unit tests
        run: |
          pushd build
          sudo ./unit_tests/falco_unit_tests 
          popd

  build-bundled-deps:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install build dependencies
        run: |
          mkdir deps
          pushd deps
          sudo apt update -y
          sudo DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends ca-certificates cmake build-essential clang-14 git pkg-config autoconf automake libelf-dev
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-14 90
          sudo update-alternatives --install /usr/bin/llvm-strip llvm-strip /usr/bin/llvm-strip-14 90
          git clone https://github.com/libbpf/bpftool.git --branch v7.0.0 --single-branch
          cd bpftool
          git submodule update --init
          cd src && sudo make install
          popd

      - name: Build modern BPF skeleton
        run: |
          mkdir skeleton-build
          pushd skeleton-build
          cmake -DUSE_BUNDLED_DEPS=ON -DBUILD_FALCO_MODERN_BPF=ON -DCREATE_TEST_TARGETS=Off ..
          make ProbeSkeleton
          popd

      # todo: build inside centos7 to minimize glibc version dependencies
      - name: Build Falco
        run: |
          mkdir build
          pushd build
          cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DUSE_BUNDLED_DEPS=On \
            -DBUILD_FALCO_UNIT_TESTS=On \
            -DFALCO_ETC_DIR=/etc/falco \
            -DBUILD_FALCO_MODERN_BPF=ON \
            -DMODERN_BPF_SKEL_DIR=${{ github.workspace }}/skeleton-build/skel_dir \
            -DBUILD_DRIVER=Off \
            -DBUILD_BPF=Off \
            ..
          make -j4 all
          popd

      - name: Run unit tests
        run: |
          pushd build
          sudo ./unit_tests/falco_unit_tests 
          popd
      
      - name: Build Falco package
        run: |
          pushd build
          cmake -DCPACK_GENERATOR=TGZ ..
          make -j4 package
          tar -xvf $(ls *.tar.gz)
          cd $(ls *.tar.gz | sed -e 's/\.tar\.gz$//')
          sudo cp -r * /
          popd
      
      - name: Upload Falco package
        uses: actions/upload-artifact@v3
        with:
          name: falco-dev-linux-x86_64.tar.gz
          path: |
            ${{ github.workspace }}/build/falco-*.tar.gz

  run-regression-tests:
    needs: [build-bundled-deps]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: 'true'
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Download Falco package
        uses: actions/download-artifact@v3
        with:
          name: falco-dev-linux-x86_64.tar.gz
      
      - name: Install Falco package
        run: |
          tar -xvf $(ls falco-*.tar.gz)
          cd $(ls falco-*.tar.gz | sed -e 's/\.tar\.gz$//')
          sudo cp -r * /

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '>=1.17.0'

      - name: Install go-junit-report
        run: |
          pushd submodules/falcosecurity-testing
          go install github.com/jstemmer/go-junit-report/v2@latest
          popd
  
      - name: Generate regression test files
        run: |
          pushd submodules/falcosecurity-testing
          go generate ./...
          popd

      - name: Run regression tests
        run: |
          pushd submodules/falcosecurity-testing
          ./build/falco.test -test.timeout=90s -test.v >> ./report.txt 2>&1 || true
          cat ./report.txt | go-junit-report -set-exit-code > report.xml
          popd

      - name: Test Summary
        if: always() # run this even if previous step fails
        uses: test-summary/action@v2
        with:
          paths: "submodules/falcosecurity-testing/report.xml"
          show: "fail"
